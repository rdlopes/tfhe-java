package {{packageName}};

import io.github.rdlopes.tfhe.api.FheArray;
import io.github.rdlopes.tfhe.api.keys.ClientKey;
import io.github.rdlopes.tfhe.api.keys.PublicKey;
import io.github.rdlopes.tfhe.api.values.*;
import io.github.rdlopes.tfhe.ffm.NativeArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collection;

import static io.github.rdlopes.tfhe.ffm.NativeCall.execute;
import static io.github.rdlopes.tfhe.ffm.TfheHeader.*;

// @formatter:off
public class {{className}} extends NativeArray implements FheArray<{{valueClassName}}, {{typeName}}, Compressed{{typeName}}, {{className}}> {
  private static final Logger logger = LoggerFactory.getLogger({{className}}.class);
// @formatter:on

  public {{className}}(Collection <{{typeName}}> elements) {
    {{trace "init" "elements"}}
    super(elements);
  }

  public static {{className}} encrypt(Collection <{{valueClassName}}> values, ClientKey clientKey) {
    {{trace "encrypt" "values" "clientKey"}}
    Collection<{{typeName}}> elements = values.stream()
                                              .map(value -> {{typeName}}.encrypt(value, clientKey))
                                              .toList();
    return new {{className}}(elements);
  }

  public static {{className}} encrypt(Collection <{{valueClassName}}> values, PublicKey publicKey) {
    {{trace "encrypt" "values" "publicKey"}}
    Collection<{{typeName}}> elements = values.stream()
                                              .map(value -> {{typeName}}.encrypt(value, publicKey))
                                              .toList();
    return new {{className}}(elements);
  }

  public static {{className}} encrypt(Collection <{{valueClassName}}> values) {
    {{trace "encrypt" "values"}}
    Collection<{{typeName}}> elements = values.stream()
                                              .map({{typeName}}::encrypt)
                                              .toList();
    return new {{className}}(elements);
  }

  {{#method this "public FheBool" "containsArray" "contains_sub_slice" (stringFormat "%s other" className)}}
    {{declare "result" class="FheBool"}}
    {{execute "contains_sub_slice" "getAddress(), getSize(), other.getAddress(), other.getSize(), result.getAddress()"}}
    return result;
  {{/method}}

  {{#method this "public FheBool" "equalsArray" "eq" (stringFormat "%s other" className)}}
    {{declare "result" class="FheBool"}}
    {{execute "eq" "getAddress(), getSize(), other.getAddress(), other.getSize(), result.getAddress()"}}
    return result;
  {{/method}}

  {{#method this (stringFormat "public %s" typeName) "sum" "sum" lookupType=true}}
    {{declare "result" class=typeName}}
    {{execute "sum" "getAddress(), getSize(), result.getAddress()" lookupType=true}}
    return result;
  {{/method}}

  // @formatter:off
}
// @formatter:on
