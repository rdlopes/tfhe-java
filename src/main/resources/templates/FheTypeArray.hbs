package {{packageName}};

import io.github.rdlopes.tfhe.api.FheArray;
import io.github.rdlopes.tfhe.api.FheUnsignedInteger;
import io.github.rdlopes.tfhe.api.keys.ClientKey;
import io.github.rdlopes.tfhe.api.keys.PublicKey;
import io.github.rdlopes.tfhe.api.keys.ServerKey;
import io.github.rdlopes.tfhe.api.serde.DynamicBuffer;
import io.github.rdlopes.tfhe.ffm.NativeArray;
import io.github.rdlopes.tfhe.ffm.NativePointer;
import io.github.rdlopes.tfhe.ffm.TfheHeader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.stream.IntStream;

import static io.github.rdlopes.tfhe.ffm.NativeCall.*;
import static io.github.rdlopes.tfhe.ffm.TfheHeader.*;

// @formatter:off
public class {{className}} extends NativeArray implements FheArray<{{valueClassName}}, {{typeName}}, Compressed{{typeName}}, {{className}}> {
  private static final Logger logger = LoggerFactory.getLogger({{className}}.class);
// @formatter:on

  public {{className}}(List <{{valueClassName}}> values, ClientKey clientKey){
    {{trace "init"}}
    super(values.size());
    IntStream.range(0, values.size())
             .forEach(index -> {
               {{declare "element" class=typeName}}
               {{#if isHighBitSize}}
                 {{execute "try_encrypt_with_client_key"
                           "values.get(index).getAddress(), clientKey.getValue(), element.getAddress()"
                           lookupType=true}}
               {{else}}
                 {{execute "try_encrypt_with_client_key" "values.get(index), clientKey.getValue(), element.getAddress()"
                           lookupType=true}}
               {{/if}}
               getAddress().set(C_POINTER, index * C_POINTER.byteSize(), element.getValue());
             });
  }

  public {{className}}(List <{{valueClassName}}> values, PublicKey publicKey){
    {{trace "init"}}
    super(values.size());
    IntStream.range(0, values.size())
             .forEach(index -> {
               {{declare "element" class=typeName}}
               {{#if isHighBitSize}}
                 {{execute "try_encrypt_with_public_key"
                           "values.get(index).getAddress(), publicKey.getValue(), element.getAddress()"
                           lookupType=true}}
               {{else}}
                 {{execute "try_encrypt_with_public_key" "values.get(index), publicKey.getValue(), element.getAddress()"
                           lookupType=true}}
               {{/if}}
               getAddress().set(C_POINTER, index * C_POINTER.byteSize(), element.getValue());
             });
  }

  public {{className}}(List <{{valueClassName}}> values) {
    {{trace "init"}}
    super(values.size());
    IntStream.range(0, values.size())
             .forEach(index -> {
               {{declare "element" class=typeName}}
               {{#if isHighBitSize}}
                 {{execute "try_encrypt_trivial" "values.get(index).getAddress(), element.getAddress()"
                           lookupType=true}}
               {{else}}
                 {{execute "try_encrypt_trivial" "values.get(index), element.getAddress()" lookupType=true}}
               {{/if}}
               getAddress().set(C_POINTER, index * C_POINTER.byteSize(), element.getValue());
             });
  }

  {{#method this "public FheBool" "containsArray" "contains_sub_slice" (stringFormat "%s other" className)}}
    {{declare "result" class="FheBool"}}
    {{execute "contains_sub_slice" "getAddress(), getSize(), other.getAddress(), other.getSize(), result.getAddress()"}}
    return result;
  {{/method}}

  {{#method this "public FheBool" "equalsArray" "eq" (stringFormat "%s other" className)}}
    {{declare "result" class="FheBool"}}
    {{execute "eq" "getAddress(), getSize(), other.getAddress(), other.getSize(), result.getAddress()"}}
    return result;
  {{/method}}

  // @formatter:off
}
// @formatter:on
