@Test
  {{#if tested.highBitSize}}
  @Tag("intensive"){{/if}}
@Tag("FheComparison")
void comparison() {
  logger.trace("comparison");

  {{testSet tested}}
  {{tested.className}} lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  {{tested.className}} rhsEncrypted = {{tested.className}}.encrypt(rhs, keySet.clientKey());

  FheBool result = lhsEncrypted.lt(rhsEncrypted);
  Boolean decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{lt tested "lhs" "rhs"}});

  result = lhsEncrypted.le(rhsEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{le tested "lhs" "rhs"}});

  result = lhsEncrypted.gt(rhsEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{gt tested "lhs" "rhs"}});

  result = lhsEncrypted.ge(rhsEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{ge tested "lhs" "rhs"}});

  {{tested.className}} minResult = lhsEncrypted.min(rhsEncrypted);
  {{tested.dataClass.simpleName}} decryptedMinResult = minResult.decrypt(keySet.clientKey());
  assertThat(decryptedMinResult).isEqualTo({{min tested "lhs" "rhs"}});

  {{tested.className}} maxResult = lhsEncrypted.max(rhsEncrypted);
  {{tested.dataClass.simpleName}} decryptedMaxResult = maxResult.decrypt(keySet.clientKey());
  assertThat(decryptedMaxResult).isEqualTo({{max tested "lhs" "rhs"}});
}
