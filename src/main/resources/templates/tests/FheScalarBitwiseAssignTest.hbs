@Test
  {{#if tested.highBitSize}}
  @Tag("intensive"){{/if}}
@Tag("FheScalarBitwiseAssign")
@Tag("assign")
@Tag("scalar")
void scalarBitwiseAssign() {
  logger.trace("scalarBitwiseAssign");

  {{testSet tested}}

  {{tested.className}} lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarShiftLeftAssign(shift);
  {{tested.dataClass.simpleName}} decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{shiftLeft tested "lhs" "shift"}});

  lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarShiftRightAssign(shift);
  decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{shiftRight tested "lhs" "shift"}});

  lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarRotateLeftAssign(shift);
  decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{rotateLeft tested "lhs" "shift"}});

  lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarRotateRightAssign(shift);
  decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  //assertThat(decryptedResult).isEqualTo({{rotateRight tested "lhs" "shift"}});
}
