@Test
  {{#if tested.highBitSize}}
  @Tag("intensive"){{/if}}
@Tag("FheScalarArithmeticsAssign")
@Tag("assign")
@Tag("scalar")
void scalarArithmeticsAssign() {
  logger.trace("scalarArithmeticsAssign");

  {{testSet tested}}
  {{tested.className}} lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarAddAssign(rhs);
  {{tested.dataClass.simpleName}} decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{add tested "lhs" "rhs"}});

  lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarSubtractAssign(rhs);
  decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{subtract tested "lhs" "rhs"}});

  lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarMultiplyAssign(rhs);
  decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{multiply tested "lhs" "rhs"}});

  lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarDivideAssign(rhs);
  decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{divide tested "lhs" "rhs"}});

  lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  lhsEncrypted.scalarRemainderAssign(rhs);
  decryptedResult = lhsEncrypted.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{remainder tested "lhs" "rhs"}});
}
