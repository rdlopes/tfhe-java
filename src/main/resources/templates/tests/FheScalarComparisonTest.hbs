@Test
  {{#if tested.highBitSize}}
  @Tag("intensive"){{/if}}
@Tag("FheScalarComparison")
@Tag("scalar")
void scalarComparison() {
  logger.trace("scalarComparison");

  {{testSet tested}}
  {{tested.className}} lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());

  FheBool result = lhsEncrypted.scalarLt(rhs);
  Boolean decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{lt tested "lhs" "rhs"}});

  result = lhsEncrypted.scalarLe(rhs);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{le tested "lhs" "rhs"}});

  result = lhsEncrypted.scalarGt(rhs);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{gt tested "lhs" "rhs"}});

  result = lhsEncrypted.scalarGe(rhs);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{ge tested "lhs" "rhs"}});

  {{tested.className}} minResult = lhsEncrypted.scalarMin(rhs);
  {{tested.dataClass.simpleName}} decryptedMinResult = minResult.decrypt(keySet.clientKey());
  assertThat(decryptedMinResult).isEqualTo({{min tested "lhs" "rhs"}});

  {{tested.className}} maxResult = lhsEncrypted.scalarMax(rhs);
  {{tested.dataClass.simpleName}} decryptedMaxResult = maxResult.decrypt(keySet.clientKey());
  assertThat(decryptedMaxResult).isEqualTo({{max tested "lhs" "rhs"}});
}
