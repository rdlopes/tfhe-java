@Test
  {{#if tested.highBitSize}}
  @Tag("intensive"){{/if}}
@Tag("FheArithmetics")
void arithmetics() {
  logger.trace("arithmetics");

  {{testSet tested}}
  {{tested.className}} lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  {{tested.className}} rhsEncrypted = {{tested.className}}.encrypt(rhs, keySet.clientKey());

  {{tested.className}} result = lhsEncrypted.add(rhsEncrypted);
  {{tested.dataClass.simpleName}} decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{add tested "lhs" "rhs"}});

  result = lhsEncrypted.subtract(rhsEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{subtract tested "lhs" "rhs"}});

  result = lhsEncrypted.multiply(rhsEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{multiply tested "lhs" "rhs"}});

  result = lhsEncrypted.divide(rhsEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{divide tested "lhs" "rhs"}});

  result = lhsEncrypted.remainder(rhsEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{remainder tested "lhs" "rhs"}});

  {{tested.className}}[]dividerAndRemainder = lhsEncrypted.dividerAndRemainder(rhsEncrypted);
  decryptedResult = dividerAndRemainder[0].decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{divide tested "lhs" "rhs"}});
  decryptedResult = dividerAndRemainder[1].decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{remainder tested "lhs" "rhs"}});

  result = lhsEncrypted.negate();
  decryptedResult = result.decrypt(keySet.clientKey());
  //assertThat(decryptedResult).isEqualTo({{negate tested "lhs"}});

  result = lhsEncrypted.ilog2();
  decryptedResult = result.decrypt(keySet.clientKey());
  //assertThat(decryptedResult).isEqualTo({{ilog2 tested "lhs"}});

  Entry<{{tested.className}}, FheBool> checkedResult = lhsEncrypted.checkedAdd(rhsEncrypted);
  decryptedResult = checkedResult.getKey()
                                 .decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{add tested "lhs" "rhs"}});
  boolean decryptedCheck = checkedResult.getValue()
                                        .decrypt(keySet.clientKey());
  //assertThat(decryptedCheck).isTrue();

  checkedResult = lhsEncrypted.checkedMultiply(rhsEncrypted);
  decryptedResult = checkedResult.getKey()
                                 .decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{multiply tested "lhs" "rhs"}});
  decryptedCheck = checkedResult.getValue()
                                .decrypt(keySet.clientKey());
  //assertThat(decryptedCheck).isTrue();

  checkedResult = lhsEncrypted.checkedSubtract(rhsEncrypted);
  decryptedResult = checkedResult.getKey()
                                 .decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{subtract tested "lhs" "rhs"}});
  decryptedCheck = checkedResult.getValue()
                                .decrypt(keySet.clientKey());
  //assertThat(decryptedCheck).isTrue();

  checkedResult = lhsEncrypted.checkedIlog2();
  decryptedResult = checkedResult.getKey()
                                 .decrypt(keySet.clientKey());
  //assertThat(decryptedResult).isEqualTo({{ilog2 tested "lhs"}});
  decryptedCheck = checkedResult.getValue()
                                .decrypt(keySet.clientKey());
  //assertThat(decryptedCheck).isTrue();
}
