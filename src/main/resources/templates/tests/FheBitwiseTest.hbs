@Test
  {{#if tested.highBitSize}}
  @Tag("intensive"){{/if}}
@Tag("FheBitwise")
void bitwise() {
  logger.trace("bitwise");

  {{testSet tested}}
  {{tested.className}} lhsEncrypted = {{tested.className}}.encrypt(lhs, keySet.clientKey());
  {{tested.className}} shiftEncrypted = {{tested.className}}.encrypt(shift, keySet.clientKey());

  {{tested.className}} result = lhsEncrypted.shiftLeft(shiftEncrypted);
  {{tested.dataClass.simpleName}} decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{shiftLeft tested "lhs" "shift"}});

  result = lhsEncrypted.shiftRight(shiftEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{shiftRight tested "lhs" "shift"}});

  result = lhsEncrypted.rotateLeft(shiftEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{rotateLeft tested "lhs" "shift"}});

  result = lhsEncrypted.rotateRight(shiftEncrypted);
  decryptedResult = result.decrypt(keySet.clientKey());
  //assertThat(decryptedResult).isEqualTo({{rotateRight tested "lhs" "shift"}});

  result = lhsEncrypted.leadingOnes();
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{leadingOnes tested "lhs"}});

  result = lhsEncrypted.leadingZeros();
  decryptedResult = result.decrypt(keySet.clientKey());
  //assertThat(decryptedResult).isEqualTo({{leadingZeros tested "lhs"}});

  result = lhsEncrypted.trailingOnes();
  decryptedResult = result.decrypt(keySet.clientKey());
  assertThat(decryptedResult).isEqualTo({{trailingOnes tested "lhs"}});

  result = lhsEncrypted.trailingZeros();
  decryptedResult = result.decrypt(keySet.clientKey());
  //assertThat(decryptedResult).isEqualTo({{trailingZeros tested "lhs"}});
}
