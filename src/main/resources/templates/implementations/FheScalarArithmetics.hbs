{{javadoc this "scalar_add"}}
public {{className}} scalarAdd({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarAdd - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_add"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_add"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}

{{javadoc this "scalar_sub"}}
public {{className}} scalarSubtract({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarSubtract - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_sub"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_sub"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}

{{javadoc this "scalar_mul"}}
public {{className}} scalarMultiply({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarMultiply - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_mul"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_mul"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}

{{javadoc this "scalar_div"}}
public {{className}} scalarDivide({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarDivide - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_div"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_div"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}

{{javadoc this "scalar_div_rem"}}
public {{className}}[]

scalarDividerAndRemainder({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarDividerAndRemainder - scalar: {}", scalar);
  {{className}} divider = new {{className}}();
  {{className}} remainder = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this
                                 "scalar_div_rem"}}(getValue(), scalarValue.getAddress(), divider.getAddress(), remainder.getAddress()))
    ;
  {{else}}
    execute(() -> {{nativeMethod this
                                 "scalar_div_rem"}}(getValue(), scalar, divider.getAddress(), remainder.getAddress()));
  {{/if}}
  return new {{className}}[]{
    divider, remainder
  } ;
}

{{javadoc this "scalar_rem"}}
public {{className}} scalarRemainder({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarRemainder - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_rem"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_rem"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}
