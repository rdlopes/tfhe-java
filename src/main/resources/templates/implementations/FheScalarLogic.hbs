{{javadoc this "scalar_bitand"}}
public {{className}} scalarBitAnd({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarBitAnd - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_bitand"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_bitand"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}

{{javadoc this "scalar_bitor"}}
public {{className}} scalarBitOr({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarBitOr - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_bitor"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_bitor"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}

{{javadoc this "scalar_bitxor"}}
public {{className}} scalarBitXor({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarBitXor - scalar: {}", scalar);
  {{className}} result = new {{className}}();
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_bitxor"}}(getValue(), scalarValue.getAddress(), result.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_bitxor"}}(getValue(), scalar, result.getAddress()));
  {{/if}}
  return result;
}
