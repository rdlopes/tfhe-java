{{javadoc this "scalar_add_assign"}}
public void scalarAddAssign({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarAddAssign - scalar: {}", scalar);
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_add_assign"}}(getValue(), scalarValue.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_add_assign"}}(getValue(), scalar));
  {{/if}}
}

{{javadoc this "scalar_sub_assign"}}
public void scalarSubtractAssign({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarSubtractAssign - scalar: {}", scalar);
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_sub_assign"}}(getValue(), scalarValue.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_sub_assign"}}(getValue(), scalar));
  {{/if}}
}

{{javadoc this "scalar_div_assign"}}
public void scalarDivideAssign({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarDivideAssign - scalar: {}", scalar);
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_div_assign"}}(getValue(), scalarValue.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_div_assign"}}(getValue(), scalar));
  {{/if}}
}

{{javadoc this "scalar_mul_assign"}}
public void scalarMultiplyAssign({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarMultiplyAssign - scalar: {}", scalar);
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_mul_assign"}}(getValue(), scalarValue.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_mul_assign"}}(getValue(), scalar));
  {{/if}}
}

{{javadoc this "scalar_rem_assign"}}
public void scalarRemainderAssign({{this.dataClass.simpleName}} scalar) {
  logger.trace("scalarRemainderAssign - scalar: {}", scalar);
  {{#if this.highBitSize}}
    {{this.valueClass.simpleName}} scalarValue = {{this.valueClass.simpleName}}.valueOf(scalar);
    execute(() -> {{nativeMethod this "scalar_rem_assign"}}(getValue(), scalarValue.getAddress()));
  {{else}}
    execute(() -> {{nativeMethod this "scalar_rem_assign"}}(getValue(), scalar));
  {{/if}}
}
